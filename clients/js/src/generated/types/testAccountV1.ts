/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  Option,
  OptionOrNullable,
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI128Decoder,
  getI128Encoder,
  getI16Decoder,
  getI16Encoder,
  getI32Decoder,
  getI32Encoder,
  getI64Decoder,
  getI64Encoder,
  getI8Decoder,
  getI8Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs';

export type TestAccountV1 = {
  u8: number;
  i8: number;
  u16: number;
  i16: number;
  u32: number;
  i32: number;
  u64: bigint;
  i64: bigint;
  u128: bigint;
  i128: bigint;
  bytes: Uint8Array;
  trueField: boolean;
  falseField: boolean;
  optionU8: Option<number>;
  optionU8None: Option<number>;
  optionU16: Option<number>;
  optionU16None: Option<number>;
  pubkey: Address;
  vec: Uint8Array;
};

export type TestAccountV1Args = {
  u8: number;
  i8: number;
  u16: number;
  i16: number;
  u32: number;
  i32: number;
  u64: number | bigint;
  i64: number | bigint;
  u128: number | bigint;
  i128: number | bigint;
  bytes: Uint8Array;
  trueField: boolean;
  falseField: boolean;
  optionU8: OptionOrNullable<number>;
  optionU8None: OptionOrNullable<number>;
  optionU16: OptionOrNullable<number>;
  optionU16None: OptionOrNullable<number>;
  pubkey: Address;
  vec: Uint8Array;
};

export function getTestAccountV1Encoder(): Encoder<TestAccountV1Args> {
  return getStructEncoder([
    ['u8', getU8Encoder()],
    ['i8', getI8Encoder()],
    ['u16', getU16Encoder()],
    ['i16', getI16Encoder()],
    ['u32', getU32Encoder()],
    ['i32', getI32Encoder()],
    ['u64', getU64Encoder()],
    ['i64', getI64Encoder()],
    ['u128', getU128Encoder()],
    ['i128', getI128Encoder()],
    ['bytes', getBytesEncoder({ size: 32 })],
    ['trueField', getBooleanEncoder()],
    ['falseField', getBooleanEncoder()],
    ['optionU8', getOptionEncoder(getU8Encoder())],
    ['optionU8None', getOptionEncoder(getU8Encoder())],
    ['optionU16', getOptionEncoder(getU16Encoder())],
    ['optionU16None', getOptionEncoder(getU16Encoder())],
    ['pubkey', getAddressEncoder()],
    ['vec', getBytesEncoder({ size: getU32Encoder() })],
  ]);
}

export function getTestAccountV1Decoder(): Decoder<TestAccountV1> {
  return getStructDecoder([
    ['u8', getU8Decoder()],
    ['i8', getI8Decoder()],
    ['u16', getU16Decoder()],
    ['i16', getI16Decoder()],
    ['u32', getU32Decoder()],
    ['i32', getI32Decoder()],
    ['u64', getU64Decoder()],
    ['i64', getI64Decoder()],
    ['u128', getU128Decoder()],
    ['i128', getI128Decoder()],
    ['bytes', getBytesDecoder({ size: 32 })],
    ['trueField', getBooleanDecoder()],
    ['falseField', getBooleanDecoder()],
    ['optionU8', getOptionDecoder(getU8Decoder())],
    ['optionU8None', getOptionDecoder(getU8Decoder())],
    ['optionU16', getOptionDecoder(getU16Decoder())],
    ['optionU16None', getOptionDecoder(getU16Decoder())],
    ['pubkey', getAddressDecoder()],
    ['vec', getBytesDecoder({ size: getU32Decoder() })],
  ]);
}

export function getTestAccountV1Codec(): Codec<
  TestAccountV1Args,
  TestAccountV1
> {
  return combineCodec(getTestAccountV1Encoder(), getTestAccountV1Decoder());
}
